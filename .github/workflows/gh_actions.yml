name: Deploy React App to GitHub Pages

on:
  push:
    branches:
      - main  # Change if using a different branch

permissions:
  contents: write  # âœ… Required for PAT to work
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      
       # Step 7: Build Docker Image
      - name: Build Docker Image
        run: |
         docker build -t ${{ secrets.DOCKER_USERNAME }}/crypto-app:latest .

     # Step 8: Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
         docker push ${{ secrets.DOCKER_USERNAME }}/crypto-app:latest

     # Step 9: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ap-south-1

     # Step 10: Check and create EC2 instance if not exists
      - name: Check and create EC2 instance if not exists
        run: |
         INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=todo-app" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)

         if [ -z "$INSTANCE_ID" ]; then
           echo "EC2 instance not found, creating..."

           SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=default" --query "SecurityGroups[0].GroupId" --output text)

           INSTANCE_ID=$(aws ec2 run-instances \
             --image-id ami-00bb6a80f01f03502 \
             --count 1 \
             --instance-type t2.medium \
             --key-name crypto-key \
             --security-group-ids $SECURITY_GROUP_ID \
             --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=crypto-app}]' \
             --query 'Instances[0].InstanceId' --output text)

           echo "Waiting for instance to be running..."
           aws ec2 wait instance-running --instance-ids $INSTANCE_ID
         else
           echo "EC2 instance is already running."
         fi

         PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[].Instances[].PublicIpAddress" --output text)
         echo "EC2 Instance Public IP: $PUBLIC_IP"
         echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

     # Step 11: Test SSH Connection
      - name: Test SSH Connection
        run: |
         # Ensure the ~/.ssh directory exists
         mkdir -p ~/.ssh

         # Write the private key into the ~/.ssh/id_rsa file
         echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa

         # Set the appropriate permissions for the private key
         chmod 600 ~/.ssh/id_rsa

         # Test the SSH connection
         ssh -v -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.PUBLIC_IP }} "echo 'SSH Connection Success'"

     # Step 12: Deploy and Run Docker Container
      - name: Deploy and Run Docker Container
        uses: appleboy/ssh-action@master
        with:
         host: ${{ env.PUBLIC_IP }}
         username: ${{ secrets.EC2_USER }}  # EC2 username (e.g., ubuntu)
         key: ${{ secrets.EC2_SSH_KEY }}  # EC2 private SSH key
         script: |
           set -x
           # Ensure the private SSH key is set up for SSH authentication
           mkdir -p ~/.ssh
           echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
           chmod 600 ~/.ssh/id_rsa

           # Connect to the EC2 instance and disable StrictHostKeyChecking
           ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.PUBLIC_IP }} << 'EOF'
             # Check if Docker is installed, if not, install it
             if ! command -v docker &> /dev/null
             then
                 echo "Docker not found, installing..."
                 sudo apt update
                 sudo apt install -y docker.io
                 sudo systemctl start docker
                 sudo systemctl enable docker
             else
                 echo "Docker is already installed."
             fi

             # Add the EC2 user to the Docker group to allow non-root access to Docker
             sudo usermod -aG docker $USER
             echo "User $USER added to the docker group."

             # Log out and back in for group changes to take effect
             newgrp docker || true

             # Stop and remove any existing container named 'todo-app'
             docker stop crypto-app || true
             docker rm crypto-app || true

             # Pull the latest Docker image from Docker Hub
             docker pull ${{ secrets.DOCKER_USERNAME }}/crypto-app:latest

             # Run the Docker container on port 3000
             docker run -d -p 3000:3000 --name crypto-app ${{ secrets.DOCKER_USERNAME }}/crypto-app:latest
           EOF